name: Terraform Plan (Basic)

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'terraform/**'
      - 'bootstrap/**'
      - '.github/workflows/terraform-*.yml'

env:
  TF_VERSION: "1.5.0"
  AWS_REGION: "ap-northeast-1"

permissions:
  id-token: write
  contents: read
  pull-requests: write

# Áí∞Â¢É„Å®„Çª„Ç∞„É°„É≥„Éà„Çígit diff„Åã„ÇâÂèñÂæó„ÅóÂ§âÊï∞„Å´Ê†ºÁ¥ç„Åô„Çã
jobs:
  detect-changes:
    name: Detect Changed Environments
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.detect.outputs.environments }}
      segments: ${{ steps.detect.outputs.segments }}
      has_changes: ${{ steps.detect.outputs.has_changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changes
        id: detect
        run: |
          # Â§âÊõ¥„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó ...‰∏âÁÇπ„É™„Éº„ÉÄ„ÅßÊó¢Â≠ò„Ç≥„Éü„ÉÉ„Éà„Åã„ÇâÊúÄÊñ∞„Ç≥„Éü„ÉÉ„Éà„Åæ„Åß„ÇíÊØîËºÉ„Åô„Çã
          # grep„Åß„Éë„Çø„Éº„É≥„Éû„ÉÉ„ÉÅ„Åô„ÇãÁÇ∫„ÄÅ^()„Å™„Å©„Çí-E„ÅßÊã°ÂºµÊ≠£Ë¶èË°®Áèæ„Å´„Åó„Å¶„ÅÑ„Çã || true„ÅßterraformÈñ¢ÈÄ£‰ª•Â§ñ„ÅÆÂ§âÊõ¥„Ç≥„Éü„ÉÉ„Éà„ÇÇ„Ç®„É©„Éº„Å´„Åó„Å™„ÅÑ
          changed_files=$(git diff --name-only origin/main...HEAD | grep -E '^(terraform|bootstrap)/' || true)
          
          # $changed_files„ÅÆÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ„Åß„ÄÅÁ©∫„Å†„Å£„ÅüÂ†¥Âêà„ÅÆÂá∫ÂäõË®≠ÂÆö„ÄÅË¶Å„ÅØterraformÈñ¢ÈÄ£„Åò„ÇÉ„Å™„ÅÑÂ†¥Âêà„ÅØhas_changes„Å´false„ÇíÂÖ•„Çå„Çã
          if [ -z "$changed_files" ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "environments=[]" >> $GITHUB_OUTPUT
            echo "segments=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # $changed_files„ÅåÁ©∫„Åò„ÇÉ„Å™„ÅÑÂ†¥Âêà„ÄÅhas_changes„Å´true„ÇíÂÖ•„Çå„Å¶Âá∫Âäõ„Åô„Çã
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "Changed files:"
          echo "$changed_files"
          
          # Áí∞Â¢É„ÇíÊ§úÂá∫
          # grep„Åß-o ( --only-matching „ÅÆÁü≠Á∏ÆÂΩ¢) „Çí‰ΩøÁî®„Åó„Å¶Áí∞Â¢ÉÊñáÂ≠ó„Å†„ÅëÂèñÂæóÔºà‰æãÔºöenvironments/devÔºâ
          # cut„Åß-d„ÅÆÂå∫Âàá„ÇäÊñáÂ≠ó„Çí/„Å´ÊåáÂÆö„Åó„ÄÅ-f2„Å®„Åó„Å¶2Áï™ÁõÆ„ÅÆ„Éï„Ç£„Éº„É´„ÉâÊñáÂ≠óÂàó„ÇíÂèñÂæóÔºà‰æãÔºödevÔºâ
          # sort„Åó„Å¶-uÔºàuniqueÔºâ„ÅßÈáçË§á„ÇíÂâäÈô§
          # jq -R -s -c 'split("\n")[:-1]'„Åß1Ë°å„ÅÆJSONÈÖçÂàó„Å´Â§âÊèõ„ÄÄ
          # -R (raw input)„ÄÄjq„Å´‰∏é„Åà„Çâ„Çå„ÅüÂÖ•Âäõ„Çí„ÄÅJSON„Å®„Åó„Å¶„Éë„Éº„Çπ„Åô„Çã„ÅÆ„Åß„ÅØ„Å™„Åè„ÄÅÂçò„Å™„ÇãÊñáÂ≠óÂàó„Å®„Åó„Å¶Ë™≠„ÅøËæº„Åæ„Åõ„Åæ„Åô
          # -s (slurp)„ÄÄ-R„ÅßË™≠„ÅøËæº„Çì„Å†Ë§áÊï∞„ÅÆÊñáÂ≠óÂàó„Çí„ÄÅ1„Å§„ÅÆÈÖçÂàó„Å´„Åæ„Å®„ÇÅ„Å¶„Åã„Çâjq„Éï„Ç£„É´„Çø„Å´Ê∏°„Åó„Åæ„Åô
          # ‰æã„Åà„Å∞„ÄÅÂÖ•Âäõ„Åådev\nprod\n„ÅÆÂ†¥Âêà„ÄÅ-R„Å†„Åë„Åß„ÅØ"dev"„Å®"prod"„ÅåÂà•„ÄÖ„Å´Âá¶ÁêÜ„Åï„Çå„Åæ„Åô„Åå„ÄÅ-Rs„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Çã„Å®„ÄÅ"dev\nprod\n"„Å®‰∏Ä„Å§„ÅÆÊñáÂ≠óÂàó„Å´„Å™„Çã
          # -c (compact output) jq„ÅÆÂá∫Âäõ„ÇíÊîπË°å„Å™„Åó„ÅÆ„Ç≥„É≥„Éë„ÇØ„Éà„Å™1Ë°å„Å´„Åó„Åæ„Åô
          # ÊîπË°å„Çísplit„ÅßÂå∫Âàá„Çä„ÄÅÊú´Â∞æÊîπË°å„Å´„Çà„ÇãÁ©∫ÊñáÂ≠óÂàó„Çí[:-1]„ÅßÊú´Â∞æ„Åã„Çâ‰∏Ä„Å§Ââç„Å®ÊåáÂÆö„Åó„Å¶ÈÖçÂàó„Åã„ÇâÈô§Â§ñ„Åô„ÇãÔºà‰æãÔºö["dev", "prod", ""] => ["dev", "prod"]Ôºâ
          
          environments=$(echo "$changed_files" | grep -oE 'environments/(local|dev|prod)' | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]' || echo '[]')
          echo "environments=$environments" >> $GITHUB_OUTPUT
          
          # „Çª„Ç∞„É°„É≥„Éà„ÇíÊ§úÂá∫
          segments=$(echo "$changed_files" | grep -oE 'segments/(foundation|application|data_processing)' | cut -d'/' -f2 | sort -u | jq -R -s -c 'split("\n")[:-1]' || echo '[]')
          echo "segments=$segments" >> $GITHUB_OUTPUT
          
          echo "Detected environments: $environments"
          echo "Detected segments: $segments"

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    strategy:
      matrix:
        environment: ${{ fromJson(needs.detect-changes.outputs.environments) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets[format('AWS_ROLE_ARN_{0}', matrix.environment)] || secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Bootstrap Check
        id: bootstrap-check
        run: |
          echo "Checking if bootstrap is required for ${{ matrix.environment }}..."
          if [ ! -f "bootstrap/.terraform.lock.hcl" ] || [ ! -d "bootstrap/.terraform" ]; then
            echo "needs_bootstrap=true" >> $GITHUB_OUTPUT
          else
            echo "needs_bootstrap=false" >> $GITHUB_OUTPUT
          fi

      - name: Bootstrap Plan
        if: steps.bootstrap-check.outputs.needs_bootstrap == 'true'
        working-directory: ./bootstrap
        run: |
          terraform init
          terraform plan -var="environment=${{ matrix.environment }}"

      - name: Terraform Plan (Standard)
        id: plan-standard
        run: |
          echo "Running plan for environment: ${{ matrix.environment }}"
          make ${{ matrix.environment }}-plan
        continue-on-error: true

      - name: Format Plan Output
        if: always()
        id: format
        run: |
          # „Éó„É©„É≥ÁµêÊûú„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
          if [ "${{ steps.plan-standard.outcome }}" = "success" ]; then
            echo "PLAN_STATUS=‚úÖ Success" >> $GITHUB_ENV
          else
            echo "PLAN_STATUS=‚ùå Failed" >> $GITHUB_ENV
          fi

      - name: Comment PR (Standard)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ matrix.environment }}';
            const status = process.env.PLAN_STATUS;
            const outcome = '${{ steps.plan-standard.outcome }}';
            
            const body = `
            ## üìã Terraform Plan Results (Standard)
            
            **Environment**: \`${environment}\`
            **Status**: ${status}
            **Configuration**: \`terraform/environments/${environment}/\`
            
            ${outcome === 'success' ? 
              '‚úÖ Plan completed successfully. Review the changes before merging.' : 
              '‚ùå Plan failed. Please check the logs and fix any issues.'
            }
            
            <details>
            <summary>üìÅ Configuration Details</summary>
            
            - **Path**: \`terraform/environments/${environment}/\`
            - **Command**: \`make ${environment}-plan\`
            - **Provider**: Standard Terraform
            
            </details>
            `;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes(`## üìã Terraform Plan Results (Standard)`) &&
              comment.body.includes(`**Environment**: \`${environment}\``)
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  segment-plan:
    name: Segment Plan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true' && needs.detect-changes.outputs.segments != '[]'
    strategy:
      matrix:
        segment: ${{ fromJson(needs.detect-changes.outputs.segments) }}
        environment: ${{ fromJson(needs.detect-changes.outputs.environments) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets[format('AWS_ROLE_ARN_{0}', matrix.environment)] || secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Segment Plan
        id: plan-segment
        run: |
          echo "Running segment plan for: ${{ matrix.segment }}-${{ matrix.environment }}"
          make seg-${{ matrix.segment }}-${{ matrix.environment }}-plan
        continue-on-error: true

      - name: Comment PR (Segment)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const segment = '${{ matrix.segment }}';
            const environment = '${{ matrix.environment }}';
            const outcome = '${{ steps.plan-segment.outcome }}';
            const status = outcome === 'success' ? '‚úÖ Success' : '‚ùå Failed';
            
            const body = `
            ## üß© Segment Plan Results
            
            **Segment**: \`${segment}\`
            **Environment**: \`${environment}\`
            **Status**: ${status}
            **Configuration**: \`terraform/segments/${segment}/environments/${environment}/\`
            
            ${outcome === 'success' ? 
              '‚úÖ Segment plan completed successfully.' : 
              '‚ùå Segment plan failed. Please check the logs.'
            }
            
            <details>
            <summary>üìÅ Segment Details</summary>
            
            - **Path**: \`terraform/segments/${segment}/environments/${environment}/\`
            - **Command**: \`make seg-${segment}-${environment}-plan\`
            - **Type**: Segment-based configuration
            
            </details>
            `;
            
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes(`## üß© Segment Plan Results`) &&
              comment.body.includes(`**Segment**: \`${segment}\``) &&
              comment.body.includes(`**Environment**: \`${environment}\``)
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  plan-summary:
    name: Plan Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, terraform-plan, segment-plan]
    if: always() && needs.detect-changes.outputs.has_changes == 'true'
    steps:
      - name: Summary Comment
        uses: actions/github-script@v7
        with:
          script: |
            const standardResult = '${{ needs.terraform-plan.result }}';
            const segmentResult = '${{ needs.segment-plan.result }}';
            
            let summary = `## üìä Terraform Plan Summary\n\n`;
            
            if (standardResult !== 'skipped') {
              summary += `**Standard Configuration**: ${standardResult === 'success' ? '‚úÖ' : '‚ùå'} ${standardResult}\n`;
            }
            
            if (segmentResult !== 'skipped') {
              summary += `**Segment Configuration**: ${segmentResult === 'success' ? '‚úÖ' : '‚ùå'} ${segmentResult}\n`;
            }
            
            summary += `\n### üîç Next Steps\n`;
            
            if (standardResult === 'success' || segmentResult === 'success') {
              summary += `- ‚úÖ Review the plan details above\n`;
              summary += `- ‚úÖ Merge this PR to apply changes\n`;
            } else {
              summary += `- ‚ùå Fix any plan errors before merging\n`;
            }
            
            summary += `\n---\n*Generated by GitHub Actions*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });