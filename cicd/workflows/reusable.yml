name: Terraform Reusable

on:
  workflow_call:
    inputs:
      action:
        required: true
        type: string # 'plan', 'apply'
      config-type:
        required: true
        type: string # 'standard', 'segment', 'terragrunt'
      environment:
        required: true
        type: string
      segment:
        required: false
        type: string
      dry-run:
        required: false
        type: boolean
        default: false
      trigger-event:
        required: true
        type: string # github.event_name
    secrets:
      aws-role-arn:
        required: true
    outputs:
      result:
        description: "Execution result"
        value: ${{ jobs.terraform-execute.outputs.result }}
      terraform-outputs:
        description: "Terraform outputs (apply only)"
        value: ${{ jobs.terraform-execute.outputs.terraform_outputs }}

jobs:
  terraform-execute:
    name: ${{ inputs.config-type }} ${{ inputs.action }} - ${{ inputs.environment }}${{ inputs.segment && format('-{0}', inputs.segment) || '' }}
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.config-type == 'terragrunt' && 45 || 30 }}
    environment:
      name: ${{ inputs.environment }}
    outputs:
      result: ${{ steps.status.outputs.result }}
      terraform_outputs: ${{ steps.outputs.outputs.terraform_outputs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.action == 'plan' && 0 || 2 }}

      - name: Setup Environment
        uses: ./.github/actions/setup-terraform-env
        with:
          environment: ${{ inputs.environment }}
          aws-region: "ap-northeast-1"
          terraform-version: "1.5.0"
          terragrunt-version: ${{ inputs.config-type == 'terragrunt' && '0.86.2' || '' }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.aws-role-arn }}
          aws-region: "ap-northeast-1"

      - name: Execute Terraform Commands
        uses: ./.github/actions/terraform-execute
        id: terraform
        with:
          action: ${{ inputs.action }}
          config-type: ${{ inputs.config-type }}
          environment: ${{ inputs.environment }}
          segment: ${{ inputs.segment }}
          dry-run: ${{ inputs.dry-run }}
          trigger-event: ${{ inputs.trigger-event }}

      - name: Get Outputs
        id: outputs
        if: inputs.action == 'apply' && steps.terraform.outcome == 'success'
        uses: ./.github/actions/terraform-outputs
        with:
          config-type: ${{ inputs.config-type }}
          environment: ${{ inputs.environment }}
          segment: ${{ inputs.segment }}

      - name: Comment Result (Plan Only)
        if: inputs.action == 'plan'
        uses: ./.github/actions/comment-plan-result
        with:
          config-type: ${{ inputs.config-type }}
          environment: ${{ inputs.environment }}
          segment: ${{ inputs.segment }}
          outcome: ${{ steps.terraform.outcome }}

      - name: Handle Errors
        if: failure()
        uses: ./.github/actions/handle-terraform-error
        with:
          config-type: ${{ inputs.config-type }}
          environment: ${{ inputs.environment }}
          segment: ${{ inputs.segment }}
          action: ${{ inputs.action }}

      - name: Set Status
        id: status
        if: always()
        run: |
          if [ "${{ steps.terraform.outcome }}" = "success" ]; then
            echo "result=success" >> $GITHUB_OUTPUT
          else
            echo "result=failure" >> $GITHUB_OUTPUT
          fi